# scripts/trace_view.py
"""
Does:
    Convert a JSONL trace file into a single self-contained HTML report with
    minimal filtering (by event type/stage) and pretty tables.

CLI:
    python -m scripts.trace_view --input artifacts/logs/traces.jsonl --out artifacts/logs/report.html
"""

from __future__ import annotations

import argparse
import html
import json
import os


def _read_jsonl(path: str):
    with open(path, "r", encoding="utf-8") as f:
        for line in f:
            line = line.strip()
            if line:
                yield json.loads(line)


def main() -> None:
    ap = argparse.ArgumentParser()
    ap.add_argument("--input", type=str, required=True)
    ap.add_argument("--out", type=str, required=True)
    args = ap.parse_args()

    rows = list(_read_jsonl(args.input))

    # Build distinct types/stages
    types = sorted({r.get("type", "") for r in rows})
    stages = sorted({r.get("stage", "") for r in rows})

    # Inline HTML+JS (no external deps)
    html_out = []
    html_out.append("""<!DOCTYPE html><html><head><meta charset="utf-8"><title>SRO Traces</title>
<style>
body{font-family:ui-sans-serif,system-ui,Segoe UI,Arial;margin:16px}
h1{font-size:20px}
.controls{margin:8px 0}
.badge{display:inline-block;padding:2px 6px;margin-right:6px;border-radius:6px;background:#eee}
table{border-collapse:collapse;width:100%}
th,td{border:1px solid #ddd;padding:6px;vertical-align:top}
tr:nth-child(even){background:#fafafa}
code{font-family:ui-monospace,Consolas,monospace}
.small{font-size:12px;color:#666}
</style></head><body>
<h1>SRO-Proof Trace Report</h1>
<div class="controls">
<label>Filter type:</label>
<select id="ft"><option value="">(all)</option>""" )
    for t in types:
        html_out.append(f'<option value="{html.escape(t)}">{html.escape(t)}</option>')
    html_out.append('</select> <label>Stage:</label><select id="fs"><option value="">(all)</option>')
    for s in stages:
        html_out.append(f'<option value="{html.escape(s)}">{html.escape(s)}</option>')
    html_out.append("""</select></div>
<table id="tbl"><thead><tr><th>#</th><th>ts</th><th>type</th><th>stage</th><th>data</th></tr></thead><tbody>""")

    for i, r in enumerate(rows, 1):
        data = html.escape(json.dumps(r.get("data", {}), ensure_ascii=False, indent=2))
        ts = html.escape(r.get("ts", ""))
        t = html.escape(r.get("type", ""))
        s = html.escape(r.get("stage", ""))
        html_out.append(f'<tr data-type="{t}" data-stage="{s}"><td>{i}</td><td>{ts}</td><td><span class="badge">{t}</span></td><td>{s}</td><td><pre><code>{data}</code></pre></td></tr>')

    html_out.append("""</tbody></table>
<script>
const ft=document.getElementById('ft'), fs=document.getElementById('fs'), rows=[...document.querySelectorAll('#tbl tbody tr')];
function filt(){const t=ft.value, s=fs.value; rows.forEach(r=>{const okT= !t || r.dataset.type===t; const okS= !s || r.dataset.stage===s; r.style.display=(okT && okS)?'':'none';});}
ft.onchange=filt; fs.onchange=filt;
</script>
<p class="small">Generated by scripts.trace_view.py</p>
</body></html>""")

    os.makedirs(os.path.dirname(os.path.abspath(args.out)), exist_ok=True)
    with open(args.out, "w", encoding="utf-8") as f:
        f.write("".join(html_out))
    print(f"Wrote {args.out}  rows={len(rows)}")


if __name__ == "__main__":
    main()
